{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "outputs": {
    "aioNamespace": {
      "type": "string",
      "value": "[variables('AIO_CLUSTER_RELEASE_NAMESPACE')]"
    },
    "customLocationId": {
      "type": "string",
      "value": "[resourceId('Microsoft.ExtendedLocation/customLocations', parameters('customLocationName'))]"
    },
    "customLocationName": {
      "type": "string",
      "value": "[parameters('customLocationName')]"
    },
    "mq": {
      "type": "object",
      "value": "[variables('MQ_PROPERTIES')]"
    },
    "observability": {
      "type": "object",
      "value": "[variables('OBSERVABILITY')]"
    },
    "targetName": {
      "type": "string",
      "value": "[parameters('targetName')]"
    }
  },
  "parameters": {
    "clusterLocation": {
      "defaultValue": "[parameters('location')]",
      "type": "string"
    },
    "clusterName": {
      "type": "string"
    },
    "customLocationName": {
      "defaultValue": "[format('{0}-cl', parameters('clusterName'))]",
      "type": "string"
    },
    "location": {
      "defaultValue": "[resourceGroup().location]",
      "type": "string"
    },
    "mqSecrets": {
      "defaultValue": {
        "enabled": true,
        "secretProviderClassName": "aio-default-spc",
        "servicePrincipalSecretRef": "aio-akv-sp"
      },
      "type": "object"
    },
    "targetName": {
      "defaultValue": "[format('{0}-target', toLower(parameters('clusterName')))]",
      "type": "string"
    }
  },
  "resources": [
    {
      "apiVersion": "2022-03-01",
      "identity": {
        "type": "SystemAssigned"
      },
      "name": "azure-iot-operations",
      "properties": {
        "autoUpgradeMinorVersion": false,
        "configurationSettings": {
          "Microsoft.CustomLocation.ServiceAccount": "default",
          "aioTrust.configmapName": "[variables('AIO_TRUST_CONFIG_MAP')]",
          "aioTrust.enabled": "true",
          "aioTrust.issuerName": "[variables('AIO_TRUST_ISSUER')]",
          "aioTrust.secretName": "[variables('AIO_TRUST_SECRET_NAME')]",
          "genevaCollectorAddress": "[variables('OBSERVABILITY').genevaCollectorAddressNoProtocol]",
          "otelCollectorAddress": "[variables('OBSERVABILITY').otelCollectorAddressNoProtocol]",
          "rbac.cluster.admin": "true"
        },
        "extensionType": "microsoft.iotoperations",
        "releaseTrain": "[variables('TRAINS').aio]",
        "scope": "[variables('AIO_EXTENSION_SCOPE')]",
        "version": "[variables('VERSIONS').aio]"
      },
      "scope": "[format('Microsoft.Kubernetes/connectedClusters/{0}', parameters('clusterName'))]",
      "type": "Microsoft.KubernetesConfiguration/extensions"
    },
    {
      "apiVersion": "2022-03-01",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.Kubernetes/connectedClusters', parameters('clusterName')), 'Microsoft.KubernetesConfiguration/extensions', 'azure-iot-operations')]"
      ],
      "identity": {
        "type": "SystemAssigned"
      },
      "name": "mq",
      "properties": {
        "autoUpgradeMinorVersion": false,
        "configurationSettings": {
          "global.openTelemetryCollectorAddr": "[variables('OBSERVABILITY').otelCollectorAddress]",
          "global.quickstart": "false",
          "secrets.enabled": "[parameters('mqSecrets').enabled]",
          "secrets.secretProviderClassName": "[parameters('mqSecrets').secretProviderClassName]",
          "secrets.servicePrincipalSecretRef": "[parameters('mqSecrets').servicePrincipalSecretRef]"
        },
        "extensionType": "microsoft.iotoperations.mq",
        "releaseTrain": "[variables('TRAINS').mq]",
        "scope": "[variables('AIO_EXTENSION_SCOPE')]",
        "version": "[variables('VERSIONS').mq]"
      },
      "scope": "[format('Microsoft.Kubernetes/connectedClusters/{0}', parameters('clusterName'))]",
      "type": "Microsoft.KubernetesConfiguration/extensions"
    },
    {
      "apiVersion": "2021-08-31-preview",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.Kubernetes/connectedClusters', parameters('clusterName')), 'Microsoft.KubernetesConfiguration/extensions', 'azure-iot-operations')]",
        "[extensionResourceId(resourceId('Microsoft.Kubernetes/connectedClusters', parameters('clusterName')), 'Microsoft.KubernetesConfiguration/extensions', 'mq')]"
      ],
      "location": "[parameters('clusterLocation')]",
      "name": "[parameters('customLocationName')]",
      "properties": {
        "clusterExtensionIds": [
          "[extensionResourceId(resourceId('Microsoft.Kubernetes/connectedClusters', parameters('clusterName')), 'Microsoft.KubernetesConfiguration/extensions', 'azure-iot-operations')]",
          "[extensionResourceId(resourceId('Microsoft.Kubernetes/connectedClusters', parameters('clusterName')), 'Microsoft.KubernetesConfiguration/extensions', 'mq')]"
        ],
        "displayName": "[parameters('customLocationName')]",
        "hostResourceId": "[resourceId('Microsoft.Kubernetes/connectedClusters', parameters('clusterName'))]",
        "namespace": "[variables('AIO_CLUSTER_RELEASE_NAMESPACE')]"
      },
      "type": "Microsoft.ExtendedLocation/customLocations"
    },
    {
      "apiVersion": "2021-08-31-preview",
      "dependsOn": [
        "[resourceId('Microsoft.ExtendedLocation/customLocations', parameters('customLocationName'))]"
      ],
      "location": "[parameters('clusterLocation')]",
      "name": "[format('{0}/{1}', parameters('customLocationName'), format('{0}-aio-sync', parameters('customLocationName')))]",
      "properties": {
        "priority": 100,
        "selector": {
          "matchLabels": {
            "management.azure.com/provider-name": "microsoft.iotoperationsorchestrator"
          }
        },
        "targetResourceGroup": "[resourceGroup().id]"
      },
      "type": "Microsoft.ExtendedLocation/customLocations/resourceSyncRules"
    },
    {
      "apiVersion": "2021-08-31-preview",
      "dependsOn": [
        "[resourceId('Microsoft.ExtendedLocation/customLocations', parameters('customLocationName'))]"
      ],
      "location": "[parameters('clusterLocation')]",
      "name": "[format('{0}/{1}', parameters('customLocationName'), format('{0}-adr-sync', parameters('customLocationName')))]",
      "properties": {
        "priority": 200,
        "selector": {
          "matchLabels": {
            "management.azure.com/provider-name": "Microsoft.DeviceRegistry"
          }
        },
        "targetResourceGroup": "[resourceGroup().id]"
      },
      "type": "Microsoft.ExtendedLocation/customLocations/resourceSyncRules"
    },
    {
      "apiVersion": "2023-10-04-preview",
      "dependsOn": [
        "[resourceId('Microsoft.ExtendedLocation/customLocations', parameters('customLocationName'))]",
        "[resourceId('Microsoft.ExtendedLocation/customLocations/resourceSyncRules', parameters('customLocationName'), format('{0}-aio-sync', parameters('customLocationName')))]"
      ],
      "extendedLocation": {
        "name": "[resourceId('Microsoft.ExtendedLocation/customLocations', parameters('customLocationName'))]",
        "type": "CustomLocation"
      },
      "location": "[parameters('location')]",
      "name": "[parameters('targetName')]",
      "properties": {
        "components": [
          "[variables('observability_helmChart')]"
        ],
        "scope": "[variables('AIO_CLUSTER_RELEASE_NAMESPACE')]",
        "topologies": [
          {
            "bindings": [
              {
                "config": {
                  "inCluster": "true"
                },
                "provider": "providers.target.helm",
                "role": "helm.v3"
              },
              {
                "config": {
                  "inCluster": "true"
                },
                "provider": "providers.target.kubectl",
                "role": "yaml.k8s"
              }
            ]
          }
        ],
        "version": "[deployment().properties.template.contentVersion]"
      },
      "type": "Microsoft.IoTOperationsOrchestrator/Targets"
    }
  ],
  "variables": {
    "AIO_CLUSTER_RELEASE_NAMESPACE": "azure-iot-operations",
    "AIO_EXTENSION_SCOPE": {
      "cluster": {
        "releaseNamespace": "[variables('AIO_CLUSTER_RELEASE_NAMESPACE')]"
      }
    },
    "AIO_TRUST_CONFIG_MAP": "aio-ca-trust-bundle-test-only",
    "AIO_TRUST_CONFIG_MAP_KEY": "ca.crt",
    "AIO_TRUST_ISSUER": "aio-ca-issuer",
    "AIO_TRUST_SECRET_NAME": "aio-ca-key-pair-test-only",
    "MQ_PROPERTIES": {
      "domain": "[format('aio-mq-dmqtt-frontend.{0}', variables('AIO_CLUSTER_RELEASE_NAMESPACE'))]",
      "localUrl": "[format('mqtts://aio-mq-dmqtt-frontend.{0}:8883', variables('AIO_CLUSTER_RELEASE_NAMESPACE'))]",
      "name": "aio-mq-dmqtt-frontend",
      "port": 8883,
      "satAudience": "aio-mq"
    },
    "OBSERVABILITY": {
      "genevaCollectorAddress": "[format('http://geneva-metrics-service.{0}.svc.cluster.local:4317', variables('AIO_CLUSTER_RELEASE_NAMESPACE'))]",
      "genevaCollectorAddressNoProtocol": "[format('geneva-metrics-service.{0}.svc.cluster.local:4317', variables('AIO_CLUSTER_RELEASE_NAMESPACE'))]",
      "otelCollectorAddress": "[format('http://aio-otel-collector.{0}.svc.cluster.local:4317', variables('AIO_CLUSTER_RELEASE_NAMESPACE'))]",
      "otelCollectorAddressNoProtocol": "[format('aio-otel-collector.{0}.svc.cluster.local:4317', variables('AIO_CLUSTER_RELEASE_NAMESPACE'))]"
    },
    "TRAINS": {
      "adr": "preview",
      "aio": "preview",
      "akri": "preview",
      "mq": "preview",
      "processor": "preview"
    },
    "VERSIONS": {
      "adr": "0.1.0-preview",
      "aio": "0.2.0-preview",
      "mq": "0.2.0-preview",
      "observability": "0.1.0-preview",
      "processor": "0.1.1-preview"
    },
    "observability_helmChart": {
      "name": "aio-observability",
      "properties": {
        "chart": {
          "repo": "azureiotoperations.azurecr.io/helm/opentelemetry-collector",
          "version": "[variables('VERSIONS').observability]"
        },
        "values": {
          "config": {
            "exporters": {
              "prometheus": {
                "endpoint": ":8889",
                "resource_to_telemetry_conversion": {
                  "enabled": true
                }
              }
            },
            "extensions": {
              "memory_ballast": {
                "size_mib": 0
              }
            },
            "processors": {
              "memory_limiter": {
                "check_interval": "60s",
                "limit_percentage": 80,
                "spike_limit_percentage": 10
              }
            },
            "receivers": {
              "jaeger": null,
              "otlp": {
                "protocols": {
                  "grpc": {
                    "endpoint": ":4317"
                  },
                  "http": {
                    "endpoint": ":4318"
                  }
                }
              },
              "prometheus": null,
              "zipkin": null
            },
            "service": {
              "extensions": [
                "health_check"
              ],
              "pipelines": {
                "logs": null,
                "metrics": {
                  "exporters": [
                    "prometheus"
                  ],
                  "receivers": [
                    "otlp"
                  ]
                },
                "traces": null
              },
              "telemetry": null
            }
          },
          "fullnameOverride": "aio-otel-collector",
          "mode": "deployment",
          "ports": {
            "jaeger-compact": {
              "enabled": false
            },
            "jaeger-grpc": {
              "enabled": false
            },
            "jaeger-thrift": {
              "enabled": false
            },
            "metrics": {
              "containerPort": 8889,
              "enabled": true,
              "protocol": "TCP",
              "servicePort": 8889
            },
            "zipkin": {
              "enabled": false
            }
          },
          "resources": {
            "limits": {
              "cpu": "100m",
              "memory": "512Mi"
            }
          }
        }
      },
      "type": "helm.v3"
    }
  }
}
